/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"os"
	"strconv"
)

const MaxDecodeSize = 32<<20

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Assumes that Method and URL have been validated by the router.

	// Prepares response.
	res := AlbumInfo{"Sex Pistols", "Never Mind The Bollocks!", "1977"}
	b, err := json.Marshal(res)
	if err != nil {
		errMsg := ErrorMsg{err.Error()}
		b, err = json.Marshal(errMsg)
		w.WriteHeader(http.StatusInternalServerError)
	}
	w.Write(b)
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Assumes that Method and URL have been validated by the router.

	// Enforces a 32MB max read to prevent malicious overloading of
	// server resources.
	r.Body = http.MaxBytesReader(w, r.Body, MaxDecodeSize)

	// Validates request body.
	err := r.ParseMultipartForm(0)  // Saves all data to disk
	if err != nil {
		errMsg := ErrorMsg{err.Error()}
		b, _ := json.Marshal(errMsg)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(b)
		return
	}
	fileValue, fileOk := r.MultipartForm.File["image"]
	// valueValue, valueOk := r.MultipartForm.Value["profile"] 
	if !fileOk || len(fileValue) != 1 {  //  || !valueOk || len(valueValue) != 1
		errMsg := ErrorMsg{"Invalid field(s) in request body"}
		b, _ := json.Marshal(errMsg)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(b)
		return
	}

	// Parses request body into AlbumsBody object.
	// var rb AlbumsBody
	multipartImage, err := r.MultipartForm.File["image"][0].Open()
	diskImage, ok := multipartImage.(*os.File)
	if !ok {
		errMsg := ErrorMsg{"Invalid image file"}
		b, _ := json.Marshal(errMsg)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(b)
    	return
	}
	fi, err := diskImage.Stat()
	if err != nil {
		errMsg := ErrorMsg{"Unable to retrieve image size"}
		b, _ := json.Marshal(errMsg)
		w.WriteHeader(http.StatusBadRequest)
		w.Write(b)
		return
	}
	imageID := "0"
	// rb.Image = &diskImage
	// err = json.Unmarshal([]byte(r.MultipartForm.Value["profile"][0]),
	// &rb.Profile)
	// if err != nil {
	// 	errMsg := ErrorMsg{err.Error()}
	// 	b, _ := json.Marshal(errMsg)
	// 	w.WriteHeader(http.StatusBadRequest)
	// 	w.Write(b)
	// 	return
	// }

	// Prepares response.
	res := ImageMetaData{imageID, strconv.Itoa(int(fi.Size()))}
	b, err := json.Marshal(res)
	if err != nil {
		errMsg := ErrorMsg{err.Error()}
		b, _ := json.Marshal(errMsg)
		w.WriteHeader(http.StatusInternalServerError)
		w.Write(b)
		return
	}
	w.Write(b)
}
